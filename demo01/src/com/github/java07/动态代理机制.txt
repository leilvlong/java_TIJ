1. 实现InvocationHandler接口编写一个承接委托的类
   该类中委托者与其为组合关系

2. 使用Proxy.newProxyInstance生成动态的代理对象,其参数条件如下
    2.1. 类加载器,加载承接委托的类
    2.2. 委托者具有的接口数组,作用有两个
        2.2.1. 获取该委托者具有的行为
        2.2.2. 返回接口类型的引用
        动态代理对象不关注类型,只关心行为
    2.3. 承接委托的类的对象

3. 条件满足,JVM动态生成代理对象,对象引用类型为参数条件2.2中的接口类型
    获取动态代理对象的类名:
        System.out.println(动态代理对象.getClass().getName())
        com.github.java07.$Proxy0
    该动态代理对象声明实现了参数条件2.2中的所有接口

4. 使用该动态代理对象无论如何都会调用InvocationHandler接口的唯一方法invoke 原因如下:
    JVM生成动态代理对象时:
        4.1. 使用参数条2.1承接委托类的类加载器加载与参数条件2.2中的接口组合了一个新类
        4.2. 返回引用时返回的是参数条件2中的接口
                不然无法拥有正确的行为
        4.3. 使用时转型为InvocationHandler
           InvocationHandler只能使用invoke方法
           该invoke方法调用承接委托类的invoke方法,传入参数:
           4.3.1 代理对象
           4.3.2 执行方法
           4.3.3 方法参数
           若调用4.3.1的代理对象的方法会重走整个4.3的流程而无限递归

5. 承接委托类 以及动态代理使用实例 以方便提供理解
public class job19 {
    public static void main(String[] args) throws Throwable {
        // 承接委托对象使用
        ISA isa = new ISA();
        Prxo prxo = new Prxo(isa);
        prxo.invoke(isa,isa.getClass().getMethod("fun"),null);

        //动态代理对象使用
        ThisA o = (ThisA) Proxy.newProxyInstance(Prxo.class.getClassLoader(), new Class[]{ThisA.class}, prxo);
        o.fun();

    }
}

interface ThisA{
    void fun();
}

class ISA implements ThisA{

    @Override
    public void fun() {
        System.out.println("fun");
    }
}


class Prxo implements InvocationHandler{
    private Object obj;

    public Prxo(Object obj) {
        this.obj = obj;
    }

    @Override
    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
        //获取类名
        System.out.println(proxy.getClass().getName());

        //若使用proxy的任何方法都会无限递归 因为这个对象就是动态代理对象,原因已解释过

        //method对象使用
        method.invoke(obj,args);
        return null;
    }
}