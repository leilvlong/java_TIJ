自我总结面向对象导论：
        在说起面向对象时,最容易想到的就是三大特性:封装 继承 多态
    这是在组织代码上总结出来的特性，而这些特性与面向对象的核心思
    想：抽象的关系显得很微妙（因为大量繁杂的工作，人会本能的寻求
    更好丶更快的解决方式，在诞生解决方式之前的更多的是诞生思想，
    以思想为明灯寻求解决的方式，若解决不了，那多半思想出问题了，
    该考虑是否合理）。
        关于抽象有很多解释，但在开发的世界中我更倾向于这种解释：
    抽象是从众多的事物中抽取出共同的、本质性的特征，而舍弃其非本
    质的特征，也正是基于这种思想，程序的扩展变得容易了许多。
        从我的思维模式上来讲，面向对象的特性只有继承与多态，封装
    只是一种手段，根本称不上特性,pyhton作为一种老牌的语言,其自定
    义函数只需通过def关键字就可以实现,然后就可以写下一大段逻辑获
    取想要的结果,这无疑正是封装,但它和面向对象一点关系都没有，更
    多的目的只是为了实现代码的复用，但我没有任何瞧不起封装的意思
        继承与多态则是在思想抽象下的发展总结出来的面向对象的实现
    的产物，而这一过程正是通过封装实现的。面向对象被提出来的原因
    更多的是在更早之前的程序开发过程中遇到的种种麻烦下提出的
        最初是面向过程的编程中，代码大量重复，需要复用的代码，于
    是理所当然的出现了封装，但这还不够，人总是善于发现各种问题，
    随着业务的扩展，原先的代码不再完全适用，需要修改或添加额外的
    的功能，仅仅只是封装完全不够，人又是善于解决问题，面向对象的
    思想应运而生，允许通过问题来描述问题，而非拿出实际的方案来解
    决问题。
        它是什么？它具有什么属性？它具有哪些行为?
        这一过程本身就已成为对某类事物的抽象，正如一条狗，它就是
    狗，是动物，它有腿，它会跑，它会叫，它会吃等许多我们已经知道
    的行为和属性，而猫亦是如此，除了不是狗，剩余的它都有，但猫也
    是动物，将本质的丶共有的抽离出来，封装与Animal class中，当我
    们需要猫时，通过这个Animal class来创造,不仅仅是猫,鸡丶羊丶狼
    这些都可以。（而封装正是实现这些的手段与方式）
        仅仅只是靠类别依然没能解决程序扩展性的问题，继承这一特性
    便自然而然的诞生，既拥有原来这类事物的特性，还拥有我自己的独
    特的行为。这意味着原先的东西我不需要改动，我只需要加入以下我
    自己独有的行为属性就可以了，通过继承Animal class，添加一个游
    泳方法，通过该继承了Animal class的新类创建对象，既有了身为这
    条狗身为动物具有的一切属性行为，还有了自己的独特属性行为，而
    猫可做不到游泳，仅仅只是于此，程序便得到了扩展
        正如上文所描述的，每种动物虽然本质上有一部分是相同的，但
    实际上（实物）有诸多区别，创建每一个动物对象都会不可避免的对
    Animal class里的行为的具体实现做出修改(在开发中称之为方法重写)
    当我们通过Animal class创建猫时,它具有的便是猫的行为,这种模式
    被称为多态:可以使程序有良好的扩展，并可以对所有类的对象进行通
    用处理。但是猫的行为依然是猫的行为，而非Animal class的行为