    异常处理系统就像房间里的窗户，使你能放弃程序的正常执行序列。
当异常情形发生的时候，正常的执行已变得不可能或者不需要了（房间的
门锁坏了），这时就需要用到窗户了。
    如果为所有代码可能发生的异常做处理的话，任务就显得过于繁重，
没人愿意这样做，结果常常是将错误忽略。开发异常处理的初衷是为了方
便程序员处理错误。
    异常处理的一个重要原则：只有在知道如何处理的情况下捕获异常。
否则都应当视为运行时异常，应当去检查代码与代码逻辑。
    异常处理的一个重要目标就是把错误的代码同错误发生的地点相分离
这使你能在一段代码中专注于要完成的事情，至于如何处理错误，则在另
一段代码中完成，这样主线代码与错误逻辑处理就不会混在一起（try块
catch块 finally块）。
    但异常检查会强制你在还没准备好如何处理错误时加上catch，这就导
致了前文出现过得异常信息丢失问题（TIJ的作者认为这个错误是无法容忍
的错误,他认为这种错误信息的丢失是一个java团队应该想办法解决的语言
Bug）
    假设一下，对某类异常信息要做相应的处理，但是异常信息丢失导致无
法捕获这个异常，那么对这类异常做处理就成了一个笑话，而且定位到问题
的根本所在也不容易（尤其是我这样的菜逼），因为整个异常信息凭空没了
尽管发生这种事的几率很小，正是因为几率很小，发生后处理起来会更加蛋
疼。
    被检查的异常固然可以方便异常处理，但也会有并发症（事物的两面性）；
    所有模型都是错误的，但总有些部分是能用的。
    强静态类型语言（编译时就做类型检查的语言）带来的好处非常明显，能
在编译期解决大量的潜在问题，这会导致迷信，这意味着退步，保持怀疑态度
在这方面至少总是好的。
    最初的异常处理（以C为例子 Liskov与Snyder在论文中指出）：每次调用
的时候都必须执行条件测试，以确定会产生何种结果，这使程序难以阅读，并
且有可能降低运行效率，因此程序员们既不愿意指出也不愿意处理异常（难怪
C写的软件Bug一大堆，每次版本更新都更新不好）
    因此异常处理的初衷就是要消除这种限制，但我们又从java的异常检查中
看到这种代码。：要求程序员把异常处理程序的代码文本附接到会引发异常的
调用上，这会降低程序的可读性，使得程序的正常思路被异常处理给破坏了。
    接一下来的一段描述大概就是说：程序员普遍很懒，越好的程序员越懒
    好的思想：异常说明；它具有两个意思，一个是我的代码可能（会）产生
这种异常，由你来处理；另一个是我的代码忽略了这些异常，还是由你来处理
学习异常机制和语法的时候我们一直关注“你来处理”这部分，但异常说明表
达的完整含义不应当被忽略却总是忽略了它；C++的异常说明不属于函数的类型
信息。编译时唯一要检查的数异常说明是否前后一致；比如函数或某些方法声
明某些异常，它的重载和导出版本也必须声明。C++不会在编译时检查确定方法
或函数是否会真的抛出异常（而java会），或者异常说明是否完整（异常说明
有没有精确描述所有可能被抛出的异常）。这样的检查只在运行期间发生。
    一些第三方观点：
    仅从小程序来看，会认为异常说明能增加开发人员的效率，并提高代码的
质量；但考擦大项目的时候，结论就不同了----开发效率下降了，而代码质量
只有微不足道的提高，甚至毫无提高。
    谈到未被捕获的异常时：我们觉得强迫程序员在不知道该采取什么措施的
时候提供处理程序，是不现实的。
    为什么函数没有异常说明就表示可以抛出任何类型异常：这样一来几乎所
有的函数或方法都得提供异常说明，也就都得重新编译，而且还会妨碍它同其
他语言交互，这样会迫使程序员违反异常处理机制的约束，它们会写欺骗程序
来掩盖程序出现额异常，这会给没有注意到这些异常的人带来一种虚假的安全
感！
    总体来说，异常说明很不错，但java的异常检查带来的麻烦与好处一样多
    作者观点：
    过去我曾坚定的认为异常检查和强静态类型检查对开发健壮的程序是非常
必要的。但是使用一些动态类型检查的语言经历告诉我这些好处实际来自于：
 1）不在于编译器是否会强制程序员去处理错误，而是要有一致的、使用异常
来报告错误的模型
 2）不在于什么时候进行检查，而是一定要有类型检查。也就是说，必须强制
程序使用正确的类型，至于这种强制措施是编译（程序员来干这个活）时还是
运行时（语言机制来干这个活）那倒没关系。
    此外，减少编译时施加的约束能显著提高程序员的编程效率。事实上，反
射和泛型就是用来补偿静态类型检查所带来的过多限制（事实上刚接触java时
因为这种强类型让我很是头疼,这也不行、那也不行,直到接触反射,终于舒服了）
    好的程序设计语言能帮助程序员写出好程序,但无论哪种语言都无法避免程
序员用它写出坏程序。
    附：
    一个程序一定要有规范的异常管理。
     1）业务需求一定要明确违反业务逻辑后是否应当被视为异常，若视为异常
     应当明确提出如何做异常处理，而不是让程序员硬着头皮去瞎几把处理
     2）程序员在编写异常处理的代码时应当严格按照需求文档与自身业务逻辑
     来处理，同时也要避免语言特性导致出现新的异常（编程错误），最好写出
     详细的异常处理文档（做了哪些异常逻辑处理，利用了哪些语言特性等），
     当在异常处理中出现异常时会更容易处理一点（尤其是异常信息丢失这种）
     3）基于2），一定要保护好异常信息本身，比如写入日志文件等，而非忽视
     它，不管这个异常是否会被处理
